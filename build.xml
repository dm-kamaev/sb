<?xml version="1.0" encoding="utf-8"?>

<project name="sber-together-api" basedir="."
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    <property name="initd_script" value="${ant.project.name}-node"/>
    <property name="project.node-modules.path" value="${basedir}/node_modules"/>
    <property name="packaging.source.frontend-app.path" value="${basedir}/app"/>
    <property name="packaging.source.frontend-app.runtime.path" value="${basedir}/runtime"/>
    <property name="packaging.source.shared.path" value="${basedir}/public/uploads"/>
    <property name="user.runtime-path" value="${packaging.source.frontend-app.runtime.path}"/>
    <property name="auth.runtime-path" value="${packaging.source.frontend-app.runtime.path}"/>
    <property name="node" value="/usr/bin/node"/>
    <property name="npm" value="/usr/bin/npm"/>
    <property name="packaging.project" value="${ant.project.name}"/>
    <property name="packaging.target.basedir" value="/opt/${packaging.project}"/>
    <property name="packaging.target.current-path" value="${packaging.target.basedir}/current"/>
    <property name="packaging.target.shared.path" value="/opt/${packaging.project}/shared"/>

    <property name="packaging.source.supervisor"
            value="${packaging.target.current-path}/environment/supervisord/${packaging.project}.conf"/>

    <property name="packaging.source.media.path" value="${basedir}/public/uploads/entities"/>
    <property name="packaging.target.shared.media" value="${packaging.target.shared.path}/public/uploads/entities"/>

    <import file="${basedir}/node_modules/deployment/packaging.xml"/>
    <import file="${basedir}/node_modules/deployment/node.xml"/>
    <import file="${basedir}/node_modules/user-service/build.xml"/>
    <import file="${basedir}/node_modules/auth-service/build.xml"/>
    <import file="${basedir}/sber-emulator/build.xml"/>

    <condition property="integration-tests">
        <contains string="${env}" substring="emul"/>
    </condition>

    <target name="packaging.release.switch"
      depends="packaging.shared-folders,
             packaging.shared-folders.media,
             packaging.supervisor.link,
             user.supervisor.link,
             auth.supervisor.link,
             sber.make-tmp-dir,
             user.migrate,
             sber.migrate-database,
             auth.create-runtime-dir,
             user.create-runtime-dir,
             sber.build-test-environment,
             packaging.release.folder.link,
             packaging.rollback-script,
             packaging.supervisor.restart,
	         packaging.crontab.install,
             sber.change-owner,
             sber.run-integration-tests
             "/>

  <target name="packaging.release.clean"
            depends="packaging.shared-folders.unlink"/>

    <target name="packaging.shared-folders"
            depends="packaging.shared-folders.create,
                     packaging.shared-folders.set-permissions,
                     packaging.shared-folders.link.logs"/>

    <target name="packaging.shared-folders.create"
            depends="packaging.shared-folders.create.logs"/>

    <target name="packaging.shared-folders.set-permissions"
            depends="packaging.shared-folders.set-permissions.logs"/>

    <target name="packaging.shared-folders.unlink"
            depends="packaging.shared-folders.unlink.logs"/>

  <target name="sber.ensure-local-config">
    <exec executable="${node}" dir="${basedir}/app/scripts" failonerror="on">
      <arg line="createConfig ${env}"/>
    </exec>
  </target>

  <target name="sber.migrate-database">
      <exec executable="${node}" dir="${basedir}/app/scripts" failonerror="on">
          <arg line="migrate"/>
      </exec>
  </target>

  <target name="sber.change-owner">
      <exec executable="chown" dir="${basedir}">
          <arg line="-R gorod ${basedir}" if:set="integration-tests"/>
          <arg line="-R svmeste ${basedir}" unless:set="integration-tests"/>
      </exec>
  </target>

  <target name="sber.allow-create-files">
      <exec executable="chmod" dir="${basedir}">
          <arg line="-R g+w ${basedir}/public/uploads/entity_pics"/>
      </exec>
  </target>

  <target name="sber.make-tmp-dir">
      <exec executable="mkdir" dir="${basedir}">
          <arg line="app/components/sequelize/tmp"/>
      </exec>
  </target>

  <target name="packaging.shared-folders.link.media" depends="packaging.shared-folders.unlink.media">
        <symlink link="${packaging.source.media.path}" resource="${packaging.target.shared.media}"/>
    </target>

    <target name="packaging.shared-folders.unlink.media">
        <symlink action="delete" link="${packaging.source.media.path}"/>
    </target>

    <target name="packaging.shared-folders.create.media">
        <mkdir dir="${packaging.target.shared.media}"/>
    </target>

    <target name="packaging.shared-folders.set-permissions.media">
        <shellscript shell="bash">
            find ${packaging.target.shared.media} -type d -exec chmod -c 777 \{\} \;
        </shellscript>
    </target>

    <target name="packaging.shared-folders.media"
            depends="packaging.shared-folders.create.media,
            packaging.shared-folders.set-permissions.media,
            packaging.shared-folders.link.media"/>

    <target name="sber.build-test-environment" if="integration-tests"
            depends="emulator.supervisor.link,
            emulator.make-tmp-dir,
            emulator.migrate"/>

    <target name="sber.run-integration-tests" if="integration-tests"
            depends="sber.integration-tests"/>

    <target name="sber.integration-tests">
        <waitfor maxwait="10" maxwaitunit="second">
            <and>
                <socket server="localhost" port="3000"/>
                <socket server="localhost" port="3001"/>
                <socket server="localhost" port="3002"/>
                <socket server="localhost" port="3005"/>
            </and>
        </waitfor>
        <exec executable="${npm}" dir="${basedir}/integration-tests" failonerror="on">
            <arg line="run tests"/>
        </exec>
    </target>

</project>
